# .github/workflows/playwright-tests.yml
name: Playwright Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'qa'
        type: choice
        options:
        - dev
        - qa
        - production

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        environment: [qa, production]
        include:
          - environment: qa
            tests: "@Smoke"
          - environment: production
            tests: "@Smoke"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Java for Allure
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Java for Allure
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Load environment configuration
      run: |
        echo "🔧 Loading .env.${{ matrix.environment }} configuration"
        cp .env.${{ matrix.environment }} .env
        
    - name: Override with GitHub Secrets
      run: |
        echo "🔐 Applying GitHub Secrets for ${{ matrix.environment }}"
        if [ "${{ matrix.environment }}" = "qa" ]; then
          echo "USERNAME=${{ secrets.QA_USERNAME }}" >> .env
          echo "PASSWORD=${{ secrets.QA_PASSWORD }}" >> .env
        elif [ "${{ matrix.environment }}" = "production" ]; then
          echo "USERNAME=${{ secrets.PROD_USERNAME }}" >> .env
          echo "PASSWORD=${{ secrets.PROD_PASSWORD }}" >> .env
        fi
        echo "HEADLESS=true" >> .env
        echo "CI=true" >> .env
        
    - name: Show configuration
      run: |
        echo "🚀 Test Configuration for ${{ matrix.environment }}:"
        echo "Base URL: $(grep BASE_URL .env | cut -d= -f2)"
        echo "API Version: $(grep API_VERSION .env | cut -d= -f2)"
        echo "Headless: $(grep HEADLESS .env | cut -d= -f2)"
        echo "Parallel: $(grep PARALLEL_EXECUTION .env | cut -d= -f2)"
        echo "Workers: $(grep PARALLEL_WORKERS .env | cut -d= -f2)"
        echo "Retries: $(grep TEST_RETRIES .env | cut -d= -f2)"
    
    - name: Run Playwright tests
      run: TEST_ENV=${{ matrix.environment }} npx playwright test --grep "${{ matrix.tests }}" --project=Chrome
      env:
        CI: true
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.environment }}
        path: |
          output/${{ matrix.environment }}/test-results/
          output/${{ matrix.environment }}/html-report/
        retention-days: 7
        
    - name: Upload Allure results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-results-${{ matrix.environment }}
        path: output/${{ matrix.environment }}/allure-results/
        retention-days: 7

  dev-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Run dev tests
      run: |
        cp .env.dev .env
        echo "USERNAME=${{ secrets.DEV_USERNAME }}" >> .env
        echo "PASSWORD=${{ secrets.DEV_PASSWORD }}" >> .env
        echo "HEADLESS=true" >> .env
        TEST_ENV=dev npx playwright test --grep "@Smoke" --project=Chrome

  allure-report:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java for Allure
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Download all Allure results
      uses: actions/download-artifact@v4
      with:
        pattern: allure-results-*
        path: allure-results
        
    - name: Install Allure CLI
      run: |
        wget -O allure-commandline.tgz https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
        tar -zxf allure-commandline.tgz
        sudo mv allure-2.24.0 /opt/allure
        sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure
        allure --version
        
    - name: Merge Allure results
      run: |
        mkdir -p merged-allure-results
        find allure-results -name "*.json" -exec cp {} merged-allure-results/ \;
        
    - name: Generate Allure Report
      run: |
        allure generate merged-allure-results --clean -o allure-report
        
    - name: Deploy to GitHub Pages
      if: always() && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: allure-report